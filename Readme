CI/CD Pipeline for Full-Stack Application


Project Overview

This repository demonstrates a full-stack application with an integrated CI/CD pipeline that:

Runs Cypress component tests on Pull Requests to the develop branch

Automatically deploys to Render when code is merged to main

User Story

As a software engineer looking to integrate a CI/CD pipeline in a codebase, I want a full-stack application that:

Runs test cases when a Pull Request is made to the develop branch

Automatically deploys to Render when code is merged to main

This ensures all code integrations are clean and pass requirements, while keeping the application constantly updated with major releases.

Features

CI/CD Pipeline

Pre-Merge Testing: Cypress component tests run automatically on PRs to develop

Auto-Deployment: Automatic deployment to Render when code is merged to main

GitHub Actions: Two workflows manage the testing and deployment processes

Branch Protection

develop branch requires:

Passing GitHub Actions

Code review approval

Up-to-date with main

Getting Started

Prerequisites

Node.js (v16 or higher)

npm or yarn

Render account (for deployment)

GitHub account

Installation

Clone the repository:

git clone https://github.com/Vader24-LT/GitHub-Actions-CI-CD.git

cd GitHub-Actions-CI-CD

Install dependencies:

npm install

Set up environment variables (create .env files for both frontend and backend)

Workflow

Development Process

Create a feature branch from develop:

git checkout -b feature/your-feature develop

Make your changes and commit

Push to GitHub and create a Pull Request to develop

CI/CD Flow

PR to develop:

GitHub Actions runs Cypress tests

Tests must pass before merge

Requires at least one approval

Merge to main:

Triggers deployment workflow

Automatically deploys to Render

Updates production environment

GitHub Actions

Test Workflow (.github/workflows/test.yml)
yaml

name: Run Cypress Tests on PR
on:
  pull_request:
    branches: [develop]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: npm install
      - run: npm run test:ci
Deploy Workflow (.github/workflows/deploy.yml)
yaml
name: Deploy to Render
on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
      - run: npm install
      - run: npm run build
      - uses: render-actions/deploy@v1
        with:
          render-token: ${{ secrets.RENDER_TOKEN }}
          service-id: ${{ secrets.RENDER_SERVICE_ID }}

Configuration

Required Secrets

Set these in your GitHub repository's Secrets:

RENDER_TOKEN - Your Render API token

RENDER_SERVICE_ID - Your Render service ID

Environment Variables

Create .env files with your configuration for both frontend and backend.

Testing

Run tests locally before pushing:

npm test

Contributing

Fork the project

Create your feature branch (git checkout -b feature/AmazingFeature)

Commit your changes (git commit -m 'Add some AmazingFeature')

Push to the branch (git push origin feature/AmazingFeature)

Open a Pull Request to develop

License

Distributed under the MIT License.

Contact

GitHub: Vader-LT24

Email: Luis322009@hotmail.com

Repository: GitHub-Actions-CI-CD
